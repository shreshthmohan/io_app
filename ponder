// This is for thinking about features, issues, solutions and potential TODOs //
// Basically anything related to io that comes to my mind. //

1.  How to handle brick-and-mortar retailers versus online retailers
    listing-wise and in the database? Also there are some retailers 
    who sell online as well as offline.

2.  How to handle things like NCR, Hyderabad-Secunderabad?

3.  How to handle aliases like Bangalore-Bengaluru, Mumbai-Bombay?

4.  How much load can an AWS-EC2 micro instance handle?
    Wordpress (PHP/MySQL): http://hubcitylabs.org/375-million-pageviews-for-15-a-month/
    For load-testing: blitz.io
    http://www.quora.com/Which-EC2-instance-size-should-I-use-to-serve-1-million-pageviews-per-month

5.  Models for social links, email and phone numbers have belongsTo only for
    events and retailers at the moment. When we add operators, schools and other
    endpoints. Will modifying MySQL schema be doable?
    TODO: Research
    DB best practices: building a modifiable database, something to which 
    adding more later is straight-forward and easy.

6.  Routes should mention id instead of just the name. This is useful for 
    avoiding confusion in case two endpoints have exactly same names.
    Also increases query efficieny.
    So the links should be like:
    http://www.indiaoutside.org/gear/bangalore/1/decathlon-whitefield/3

7.  Remember to display 'hand' when user hovers over any element they can
    interact with, like a link, a radio-button or a checkbox, especially when
    doing end-user side frontend.
    Also not allowed hand like the one used in ixigo.com

8.  Beautifying links ... from www.example.com/city/23/retailer%20name/21 to
    www.example.com/city/retailer-name while taking care of #6

9.  Show more details about interactive elements on hover.

10. Character set and collation in Mysql DB schema. What it means? What to do?

11. New table for linked images (basically just urls). Also check how FB picks
    up images from links.

12. Analytics: How many views through newsletter, search engines, social
    networks. Outgoing clicks, stats based on activity, location and time of the
    year. Compare with existing data such as that of Google Trends.
    What about Google Analytics?

13. In a recent error I realised that node server should not crash on a error
    if it successfully started listening. It must keep running/listening and
    throw error in the browser.
    It seems the "error" will have to be handled by rerouting to some other URL
    when a query to DB returns an empty object.
    Use promises for this?
    Yes, but no need for a new module.
    use .error() just like you use .success also see this once
    https://github.com/sequelize/sequelize/issues/638

14. TODO: Also allow editing of City in retailer/event.modify
    Also event_name/retailer_name

15. The date/datetime sequelize issue. Now what sequelize is doing is that it
    is converting entered date to datetime in UTC. Can be overcome by simply 
    using datetime with sequelize. TODO explain this thing properly 

16. What's the meaning of 'role' attribute in 'div' tag

17. What's bootstrap.css.map for?!

18. Rethink mobile menu?
      1. http://responsivenavigation.net/examples/simple-padding/index.html

19. Inspiration:
      Look: ixigo.com
      Design: Zomato.com
      Community: Nomadlist.io
      Miscellaneous: 

20. Frontend/Backend?
    Frontend now, then move to backend and iron out ...

21. Where is env being set?! See admin_app.js

22. Responsive menu: Using bootstrap default as of now. Experiment in future
    with the following or others:
      1. http://responsivenavigation.net/examples/simple-padding/index.html

23. Using Google's CDN:
      1. http://www.lynda.com/WordPress-tutorials/003-Using-CDN-speed-up-your-sites/93388/103248-4.html
      2. https://developers.google.com/speed/libraries/devguide

24. The dilemma of hosting js, css, svg and such files for speed:
    1. Custom stuff has to be hosted locally.
    2. There's Google's CDN and bootstrap CDN.
    So TODO: update app accordingly.

25. Introduce secondary tags.
    Say 'running' is a primary tag and 'marathon' is secondary.
    Or 'climbing' is primary and 'bouldering' is secondary.
    To introduce new table of modify existing Tags table. Think.
    Done. Added two new tables, Subtags and EventSubtags. Clearly only events
    can have subtags at the moment.

26. TODO: Allow destruction/modification of existing tags/subtags.
    Associated tags/subtags will cause problem. Think.
    TODO: Prevent creation of duplicates

27. Issue with sequelize (when using limit with nested joins?)
    See file: /routes/user/event.js (exp2) commit 07745f2e2e12bfff7aa2ad2c3a769066f0495656
    // query sent by sequelize without limit
SELECT `Events`.`event_name`, date_format(`start_date`, '%e %M %Y') as `start_date_f`, `City`.`id` AS `City.id`, `City`.`city_name` AS `City.city_name`, `City`.`createdAt` AS `City.createdAt`, `City`.`updatedAt` AS `City.updatedAt`, `EventTags`.`id` AS `EventTags.id`, `EventTags`.`cor_name` AS `EventTags.cor_name`, `EventTags`.`createdAt` AS `EventTags.createdAt`, `EventTags`.`updatedAt` AS `EventTags.updatedAt`, `EventTags`.`EventId` AS `EventTags.EventId`, `EventTags`.`TagId` AS `EventTags.TagId`, `EventTags.Tag`.`id` AS `EventTags.Tag.id`, `EventTags.Tag`.`tag_name` AS `EventTags.Tag.tag_name`, `EventTags.Tag`.`createdAt` AS `EventTags.Tag.createdAt`, `EventTags.Tag`.`updatedAt` AS `EventTags.Tag.updatedAt`, `EventSubtags`.`id` AS `EventSubtags.id`, `EventSubtags`.`cor_name` AS `EventSubtags.cor_name`, `EventSubtags`.`createdAt` AS `EventSubtags.createdAt`, `EventSubtags`.`updatedAt` AS `EventSubtags.updatedAt`, `EventSubtags`.`EventId` AS `EventSubtags.EventId`, `EventSubtags`.`SubtagId` AS `EventSubtags.SubtagId`, `EventSubtags.Subtag`.`id` AS `EventSubtags.Subtag.id`, `EventSubtags.Subtag`.`subtag_name` AS `EventSubtags.Subtag.subtag_name`, `EventSubtags.Subtag`.`createdAt` AS `EventSubtags.Subtag.createdAt`, `EventSubtags.Subtag`.`updatedAt` AS `EventSubtags.Subtag.updatedAt` FROM `Events` LEFT OUTER JOIN `Cities` AS `City` ON `City`.`id` = `Events`.`CityId` LEFT OUTER JOIN `EventTags` AS `EventTags` ON `Events`.`id` = `EventTags`.`EventId` LEFT OUTER JOIN `Tags` AS `EventTags.Tag` ON `EventTags.Tag`.`id` = `EventTags`.`TagId` LEFT OUTER JOIN `EventSubtags` AS `EventSubtags` ON `Events`.`id` = `EventSubtags`.`EventId` LEFT OUTER JOIN `Subtags` AS `EventSubtags.Subtag` ON `EventSubtags.Subtag`.`id` = `EventSubtags`.`SubtagId` WHERE start_date > NOW();


    // query sent by sequelize with limit 10
SELECT `Events`.*, `City`.`id` AS `City.id`, `City`.`city_name` AS `City.city_name`, `City`.`createdAt` AS `City.createdAt`, `City`.`updatedAt` AS `City.updatedAt`, `EventTags`.`id` AS `EventTags.id`, `EventTags`.`cor_name` AS `EventTags.cor_name`, `EventTags`.`createdAt` AS `EventTags.createdAt`, `EventTags`.`updatedAt` AS `EventTags.updatedAt`, `EventTags`.`EventId` AS `EventTags.EventId`, `EventTags`.`TagId` AS `EventTags.TagId`, `EventTags.Tag`.`id` AS `EventTags.Tag.id`, `EventTags.Tag`.`tag_name` AS `EventTags.Tag.tag_name`, `EventTags.Tag`.`createdAt` AS `EventTags.Tag.createdAt`, `EventTags.Tag`.`updatedAt` AS `EventTags.Tag.updatedAt`, `EventSubtags`.`id` AS `EventSubtags.id`, `EventSubtags`.`cor_name` AS `EventSubtags.cor_name`, `EventSubtags`.`createdAt` AS `EventSubtags.createdAt`, `EventSubtags`.`updatedAt` AS `EventSubtags.updatedAt`, `EventSubtags`.`EventId` AS `EventSubtags.EventId`, `EventSubtags`.`SubtagId` AS `EventSubtags.SubtagId`, `EventSubtags.Subtag`.`id` AS `EventSubtags.Subtag.id`, `EventSubtags.Subtag`.`subtag_name` AS `EventSubtags.Subtag.subtag_name`, `EventSubtags.Subtag`.`createdAt` AS `EventSubtags.Subtag.createdAt`, `EventSubtags.Subtag`.`updatedAt` AS `EventSubtags.Subtag.updatedAt` FROM (SELECT `Events`.`event_name`, date_format(`start_date`, '%e %M %Y') as `start_date_f`, `Events`.`id` FROM `Events` WHERE start_date > NOW() LIMIT 10) AS `Events` LEFT OUTER JOIN `Cities` AS `City` ON `City`.`id` = `Events`.`CityId` LEFT OUTER JOIN `EventTags` AS `EventTags` ON `Events`.`id` = `EventTags`.`EventId` LEFT OUTER JOIN `Tags` AS `EventTags.Tag` ON `EventTags.Tag`.`id` = `EventTags`.`TagId` LEFT OUTER JOIN `EventSubtags` AS `EventSubtags` ON `Events`.`id` = `EventSubtags`.`EventId` LEFT OUTER JOIN `Subtags` AS `EventSubtags.Subtag` ON `EventSubtags.Subtag`.`id` = `EventSubtags`.`SubtagId`

28. TODO: Use validations in sequelize 
    Example: citynames should be unique (or should they? add states too?)

29. fix /app/events/upcoming (without any key-value pairs or so to say ... activity=null)
    Done

30. Useful bootstrap css guide
    http://getbootstrap.com/css/#type-lists
    http://getbootstrap.com/css/#forms
    http://getbootstrap.com/css/#responsive-utilities

31. TODO: MySQL security

32. Really good explanation of how 'exports' work at 
    http://blog.liangzan.net/blog/2012/06/04/how-to-use-exports-in-nodejs/
    In short, use exports.name to export multiple objects (?) and refer to it as
    name
    Use module.exports if you have only single object (?) to export and refer
    it as filename of the file in which you wrote module.exports

33. Admin view: Improve city lists of retailers and events. Merge to one page? And/Or list only those cities that have at least one retailer

34. Multiple strategies with passportjs: https://gist.github.com/joshbirk/1732068

35. A usecase very close to what I need for fecthing things for each tag instance: https://gist.github.com/jagged3dge/1ae038cf050662986121
    Using promises i.e.
